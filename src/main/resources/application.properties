#MVC properties
spring.mvc.throw-exception-if-no-handler-found=true
spring.resources.add-mappings=false
#Datasource Properties
spring.datasource.type=com.zaxxer.hikari.HikariDataSource
spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.initialize=true
spring.datasource.continue-on-error=false
spring.datasource.platform=postgres
# Hikari will use the above plus the following to setup connection pooling
spring.datasource.hikari.minimumIdle=2
spring.datasource.hikari.maximumPoolSize=${SPRING_DATASOURCE_MAX_CONNECTION}
spring.datasource.hikari.idleTimeout=600000
spring.datasource.hikari.poolName=SpringBootJPAHikariCP
spring.datasource.hikari.maxLifetime=1800000
spring.datasource.hikari.connectionTimeout=30000
# Show or not log for each sql query
spring.jpa.show-sql=false
spring.jpa.generate-ddl=false
# Hibernate ddl auto (create, create-drop, update)
spring.jpa.hibernate.ddl-auto=none
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL95Dialect
spring.jpa.hibernate.use-new-id-generator-mappings=false
# Naming strategy
spring.jpa.hibernate.naming.strategy=org.hibernate.cfg.ImprovedNamingStrategy
# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQL95Dialect
